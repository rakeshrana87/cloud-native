###### Spring Boot will automatically pick up the data.sql and run it against our configured H2 database during application startup. This is a good way to seed the database for testing or other purposes.
logging.level.root=info
logging.level.demo.service=debug
#spring.profiles.active=dev
#spring.profile=dev
logging.console=off
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n
logging.path=logs
logging.file=${logging.path}/log.log
logging.pattern.file=%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n
## Server Properties
server.port= 8080
server.compression.enabled=true


#Metrics related configurations

management.endpoint.metrics.enabled=true

management.endpoints.web.exposure.include=prometheus

management.endpoint.prometheus.enabled=true

management.metrics.export.prometheus.enabled=true
# H2 database has an embedded GUI 
spring.h2.console.enabled=true

# console
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=true

###############   We can change that behavior by using file-based storage. ######
#local
spring.datasource.url=jdbc:h2:file:~/data/remote
# remote
#spring.datasource.url=jdbc:h2:tcp://172.17.0.2:9092/~./data/remote

#spring.datasource.url=jdbc:h2:tcp://localhost:9092/~/data/demo
########## By design, the in-memory database is volatile and data will be lost when we restart the application.##########
#spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

## App Properties
app.jwtSecret= JWTSuperSecretKey
app.jwtExpirationInMs = 604800000
